@page "/"
@using blackjack.Structs;
<PageTitle>Blackjack</PageTitle>

<div class="container-fluid game-container-1">
    <div class="row">
        <div class="col-4 text-start">
            <small class="">Win Streak: @winStreak</small>
        </div>
        <div class="col-4 font-monospace">
            <h1 class="m-0 fs-2 text-black fw-bold"><span class="display-6 text-danger">B</span>lack<span class="display-6 text-danger">j</span>ack</h1>
            <small class="text-warning m-0" style="letter-spacing: 0.2rem;">PAYS 3 10 2</small>
        </div>
        <div class="col-4 text-end p-0">
            <button @onclick="ToggleInstructions" class="btn btn-sm text-secondary border-0 text-uppercase" style="font-size: 0.6rem;">
                @(showInstructions ? "Hide" : "Instructions")
            </button>
        </div>
    </div>
</div>

<div class="container-fluid game-container-2">
    <div class="row d-flex justify-content-center align-items-center">
        <div class="col-4">

            <div class="row m-3 p-2">
                <div class="col-2"></div>
                <div class="col-10 d-flex">
                </div>
            </div>
            <div class="row m-3 p-2">
                <div class="col-2"></div>
                <div class="col-10 d-flex">
                </div>
            </div>

        </div>

        <div class="col-4">

            <div class="row mt-1">
                <div class="col">
                    <div class="d-inline-block">
                        <h6 class="m-1 text-danger">Dealer</h6>
                        <h6 class="m-1">@dealerScore</h6>
                        @foreach (var card in dealerCards)
                        {
                            <div class="card-container m-1">
                                <span class="card-item display-3 @(Array.IndexOf(unicodeCards, card.Symbol) >= 13 && Array.IndexOf(unicodeCards, card.Symbol) <= 38 ? "text-danger" : "text-black")">@card.Symbol</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    ---
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="d-inline-block">
                        @foreach (var card in playerCards)
                        {
                            <div class="card-container m-1">
                                <span class="card-item display-3 @(Array.IndexOf(unicodeCards, card.Symbol) >= 13 && Array.IndexOf(unicodeCards, card.Symbol) <= 38 ? "text-danger" : "text-black")">@card.Symbol</span>
                            </div>
                        }

                    </div>
                    <h6 class="m-1">@playerScore</h6>
                    <h6 class="m-1 text-primary">Player</h6>

                </div>
            </div>

        </div>

        <div class="col-4">

            <div class="row m-3">
                <div class="col-6 text-center">
                    <h3 class="text-white">@winner</h3>
                </div>
                <div class="col-6 d-flex">
                </div>
            </div>

        </div>

    </div>

    <div class="row">
        <div class="col">
            @if (showInstructions)
            {
                <h6 class="text-uppercase">Rules:</h6>
                <ul class="text-nowrap">
                    <li><strong>OBJECTIVE</strong>: Aim for a card total close to 21 but don't exceed it.</li>
                    <li><strong>VALUES</strong>: Cards 2-10 are face value, face cards are 10, and Aces are 1 or 11.</li>
                    <li><strong>DEAL</strong>: Players get two cards, one hidden. Dealer gets two with one exposed.</li>
                    <li><strong>HIT OR STAND</strong>: Players can "hit" for an extra card or "stand". Over 21 is a "bust".</li>
                    <li><strong>DEALERS TURN</strong>: Dealer reveals the hidden card and hits until 17 or higher.</li>
                    <li><strong>HOW TO WIN</strong>: Get closer to 21 than the dealer. Dealer's bust means players win. Same totals tie.</li>
                </ul>
                <p class="lead">Dive in, play smart, and may the odds be ever in your favor!</p>
            }
        </div>
    </div>
</div>
<div class="container">
    <div class="row mt-3">
        <div class="col text-center">
            @if (!stay)
            {
                <button class="btn btn-sm btn-success me-1" @onclick="(() => DealCard(ref playerCards, PlayerTypes.Player))">Draw</button>
                <button class="btn btn-sm btn-success" @onclick="Stay">Stay</button>
            }
            else
            {
                <button class="btn btn-sm btn-success" @onclick="NewGame">New Game</button>
            }
        </div>
    </div>
</div>

@code {
    private void ToggleInstructions() => showInstructions = !showInstructions;
    private bool showInstructions = false;

    string[] unicodeCards = new string[]
    {
        "🂡", "🂢", "🂣", "🂤", "🂥", "🂦", "🂧", "🂨", "🂩", "🂪", "🂫", "🂭", "🂮",  // Spades
        "🂱", "🂲", "🂳", "🂴", "🂵", "🂶", "🂷", "🂸", "🂹", "🂺", "🂻", "🂽", "🂾",  // Hearts
        "🃁", "🃂", "🃃", "🃄", "🃅", "🃆", "🃇", "🃈", "🃉", "🃊", "🃋", "🃍", "🃎",  // Diamonds
        "🃑", "🃒", "🃓", "🃔", "🃕", "🃖", "🃗", "🃘", "🃙", "🃚", "🃛", "🃝", "🃞"   // Clubs
    };

    private const int numberOfCards = 52;
    private bool stay = false;
    private Card[] deck = new Card[numberOfCards];
    private Card[] playerCards = new Card[0];
    private Card[] dealerCards = new Card[0];
    private int playerScore = 0;
    private int dealerScore = 0;
    private string winner = string.Empty;
    private int winStreak = 0;

    private enum PlayerTypes
    {
        Dealer,
        Player
    }

    private enum Results
    {
        Unknown,
        Blackjack,
        PlayerLost,
        DealerLost
    }

    private Results result = Results.Unknown;

    protected override void OnInitialized()
    {
        base.OnInitialized(); // Add this line as a good practice.
        deck = ShuffleDeck(CreateDeck());
        NewGame(); // Deal initial cards for both player and dealer
        var cards = new Card[numberOfCards];
        var index = 0;
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 13; j++)
            {
                var value = j > 9 ? 10 : j + 1;
                cards[index] = new Card(unicodeCards[j + (i * 13)], value);
                index++;
            }
        }

        Random rand = new Random();
        for (int i = cards.Length - 1; i > 0; i--)
        {
            int j = rand.Next(0, i + 1);
            Card temp = cards[i];
            cards[i] = cards[j];
            cards[j] = temp;
        }

        deck = cards;
    }

    void NewGame()
    {
        deck = ShuffleDeck(CreateDeck());
        playerCards = new Card[0];
        dealerCards = new Card[0];
        playerScore = 0;
        dealerScore = 0;
        stay = false;
        winner = string.Empty;
        result = Results.Unknown;
        DealCard(ref dealerCards, PlayerTypes.Dealer, 2);
        DealCard(ref playerCards, PlayerTypes.Player, 2);
    }

    void DealCard(ref Card[] cards, PlayerTypes playerType, int takeCards = 1)
    {
        cards = cards.Concat(deck.Take(takeCards)).ToArray();
        deck = deck.Skip(takeCards).ToArray();
        if (playerType.Equals(PlayerTypes.Player))
        {
            CalculateScore(cards, out playerScore);
            if (playerScore == 21 && cards.Length == 2)
            {
                result = Results.Blackjack;
                Stay();
            }
            else if (playerScore > 21)
            {
                result = Results.PlayerLost;
                Stay();
            }
        }
        else
        {
            if (!stay) cards[0].IsHidden = true;
            CalculateScore(cards, out dealerScore);
            if (dealerScore == 21 && cards.Length == 2 && stay)
            {
                result = Results.Blackjack;  // This now signifies either the player's or dealer's Blackjack.
            }
            else if (dealerScore > 21) result = Results.DealerLost;
        }
    }

    void CalculateScore(Card[] cards, out int score)
    {
        score = cards.Sum(c => c.Value);
        var aces = cards.Count(c => c.Value == 1 && !c.IsHidden);
        if (score + aces * 10 <= 21) score += aces * 10;
    }

    void Stay()
    {
        stay = true;
        dealerCards[0].IsHidden = false;
        if (result == Results.Unknown) DrawDealerCards();
        DetermineWinner();
    }

    void DrawDealerCards()
    {
        while (dealerScore < 17 || (dealerScore == 17 && dealerCards.Any(card => card.Value == 1)))
        {
            DealCard(ref dealerCards, PlayerTypes.Dealer);
        }
    }

    void DetermineWinner()
    {
        if (result == Results.Blackjack && playerScore == 21 && playerCards.Length == 2)
        {
            winner = "Player wins with Blackjack";
            winStreak++;
        }
        else if (result == Results.Blackjack && dealerScore == 21 && dealerCards.Length == 2)
        {
            winner = "Dealer wins with Blackjack";
            winStreak = 0;
        }
        else if (result == Results.PlayerLost)
        {
            winner = "Dealer wins";
            winStreak = 0;
        }
        else if (result == Results.DealerLost)
        {
            winner = "Player wins";
            winStreak++;
        }
        else if (playerScore > dealerScore)
        {
            winner = "Player wins";
            winStreak++;
        }
        else if (playerScore < dealerScore)
        {
            winner = "Dealer wins";
            winStreak = 0;
        }
        else
        {
            winner = "Draw";
        }
    }


    Card[] CreateDeck()
    {
        var cards = new Card[numberOfCards];
        var index = 0;
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 13; j++)
            {
                var value = j > 9 ? 10 : j + 1;
                cards[index] = new Card(unicodeCards[i * 13 + j], value);
                index++;
            }
        return cards;
    }

    Card[] ShuffleDeck(Card[] cards)
    {
        var random = new Random();
        for (int i = cards.Length - 1; i > 0; i--)
        {
            int j = random.Next(0, i + 1);
            Card temp = cards[i];
            cards[i] = cards[j];
            cards[j] = temp;
        }
        return cards;
    }

}
