@page "/"
@using blackjack.Structs

<PageTitle>Blackjack</PageTitle>

<div class="container mt-5">
    <h1 class="text-uppercase mb-4">Blackjack</h1>
    <p class="lead">Simple, yet thrilling, Blackjack is one of the most popular casino card games worldwide. Often known as "21"; the goal is to beat the dealer without going over 21 points.</p>
    <h3 class="text-uppercase mb-1">Rules:</h3>
    <ul class="mb-4">
        <li><strong>Objective</strong>: Reach a card total closer to 21 than the dealer without exceeding it.</li>
        <li><strong>Card Values</strong>: Numbered cards (2-10) count as face value, face cards (Jacks, Queens, Kings) count as 10, and Aces can count as either 1 or 11.</li>
        <li><strong>Starting Deal</strong>: Each player receives two cards, typically one face up and one face down. The dealer also receives two cards with one face up.</li>
        <li><strong>Hit or Stand</strong>: Players decide whether to "hit" (take an additional card) or "stand" (stick with their current total). Remember, going over 21 is a "bust", and you lose the round instantly!</li>
        <li><strong>Dealer's Turn</strong>: Once players finish, the dealer reveals their hidden card and must hit until their hand is 17 or higher.</li>
        <li><strong>Winning the Game</strong>: Players closer to 21 than the dealer win. If the dealer busts, all remaining players win. Ties (pushes) occur if both the dealer and player have the same total.</li>
    </ul>
    <p class="lead mb-5">Dive in, play smart, and may the odds be ever in your favor!</p>
    @{
        int cardsPerRow = 13;
        for (int i = 0; i < unicodeCards.Length; i += cardsPerRow)
        {
            <p>
                @for (int j = i; j < i + cardsPerRow && j < unicodeCards.Length; j++)
                {
                    <span class="display-1">@($"{unicodeCards[j]}")</span>
                }
            </p>
        }
    }
</div>

<!--
    while (position < numberOfCards)
        {
            var idx = random.Next(cards.Length - 1);
            Card card = cards[idx];
            shuffled[position] = card;



            Card[] tempArray = new Card[cards.Length - 1];
            // Copy elements before the index to remove
            Array.Copy(cards, 0, tempArray, 0, idx);
            // Copy elements after the index to remove
            Array.Copy(cards, idx + 1, tempArray, idx, cards.Length - idx - 1);
            // Overwrite original array (optional)
            cards = tempArray;



            position++;
        }
-->

@code {
    string[] unicodeCards = new string[]
    {
        "🂡", "🂢", "🂣", "🂤", "🂥", "🂦", "🂧", "🂨", "🂩", "🂪", "🂫", "🂭", "🂮",  // Spades
        "🂱", "🂲", "🂳", "🂴", "🂵", "🂶", "🂷", "🂸", "🂹", "🂺", "🂻", "🂽", "🂾",  // Hearts
        "🃁", "🃂", "🃃", "🃄", "🃅", "🃆", "🃇", "🃈", "🃉", "🃊", "🃋", "🃍", "🃎",  // Diamonds
        "🃑", "🃒", "🃓", "🃔", "🃕", "🃖", "🃗", "🃘", "🃙", "🃚", "🃛", "🃝", "🃞"   // Clubs
    };

    private const int numberOfCards = 52;
    private bool stay = false;
    private Card[] deck = new Card[numberOfCards];
    private Card[] playerCards = new Card[0];
    private Card[] dealerCards = new Card[0];
    private int playerScore = 0;
    private int dealerScore = 0;
    private string winner = string.Empty;

    private enum PlayerTypes
    {
        Dealer,
        Player
    }

    private enum Results
    {
        Unknown,
        Blackjack,
        PlayerLost,
        DealerLost
    }

    private Results result = Results.Unknown;
}